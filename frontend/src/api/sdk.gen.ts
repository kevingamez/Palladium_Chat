// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ChatStreamChatStreamPostData, ChatStreamChatStreamPostError, UploadFilesChatUploadPostData, UploadFilesChatUploadPostError, ChatStreamWithFilesChatStreamWithFilesPostData, ChatStreamWithFilesChatStreamWithFilesPostError, CreateSheetSheetsCreatePostData, CreateSheetSheetsCreatePostError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Chat Stream
 * Env√≠a el historial a OpenAI y transmite la respuesta token a token.
 */
export const chatStreamChatStreamPost = <ThrowOnError extends boolean = false>(options: Options<ChatStreamChatStreamPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ChatStreamChatStreamPostError, ThrowOnError>({
        url: '/chat/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Files
 */
export const uploadFilesChatUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFilesChatUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, UploadFilesChatUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/chat/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Chat Stream With Files
 * Chat with file context if files have been uploaded
 */
export const chatStreamWithFilesChatStreamWithFilesPost = <ThrowOnError extends boolean = false>(options: Options<ChatStreamWithFilesChatStreamWithFilesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, ChatStreamWithFilesChatStreamWithFilesPostError, ThrowOnError>({
        url: '/chat/stream-with-files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Sheet
 */
export const createSheetSheetsCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateSheetSheetsCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateSheetSheetsCreatePostError, ThrowOnError>({
        url: '/sheets/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};