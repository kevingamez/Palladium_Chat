// This file is auto-generated by @hey-api/openapi-ts

import { type Options, chatStreamChatStreamPost, uploadFilesChatUploadPost, chatStreamWithFilesChatStreamWithFilesPost, createSheetSheetsCreatePost, rootGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { ChatStreamChatStreamPostData, ChatStreamChatStreamPostError, UploadFilesChatUploadPostData, UploadFilesChatUploadPostError, ChatStreamWithFilesChatStreamWithFilesPostData, ChatStreamWithFilesChatStreamWithFilesPostError, CreateSheetSheetsCreatePostData, CreateSheetSheetsCreatePostError, RootGetData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const chatStreamChatStreamPostQueryKey = (options: Options<ChatStreamChatStreamPostData>) => createQueryKey('chatStreamChatStreamPost', options);

export const chatStreamChatStreamPostOptions = (options: Options<ChatStreamChatStreamPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await chatStreamChatStreamPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: chatStreamChatStreamPostQueryKey(options)
    });
};

export const chatStreamChatStreamPostMutation = (options?: Partial<Options<ChatStreamChatStreamPostData>>): UseMutationOptions<unknown, ChatStreamChatStreamPostError, Options<ChatStreamChatStreamPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, ChatStreamChatStreamPostError, Options<ChatStreamChatStreamPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await chatStreamChatStreamPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const uploadFilesChatUploadPostQueryKey = (options: Options<UploadFilesChatUploadPostData>) => createQueryKey('uploadFilesChatUploadPost', options);

export const uploadFilesChatUploadPostOptions = (options: Options<UploadFilesChatUploadPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await uploadFilesChatUploadPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: uploadFilesChatUploadPostQueryKey(options)
    });
};

export const uploadFilesChatUploadPostMutation = (options?: Partial<Options<UploadFilesChatUploadPostData>>): UseMutationOptions<unknown, UploadFilesChatUploadPostError, Options<UploadFilesChatUploadPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, UploadFilesChatUploadPostError, Options<UploadFilesChatUploadPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await uploadFilesChatUploadPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const chatStreamWithFilesChatStreamWithFilesPostQueryKey = (options: Options<ChatStreamWithFilesChatStreamWithFilesPostData>) => createQueryKey('chatStreamWithFilesChatStreamWithFilesPost', options);

export const chatStreamWithFilesChatStreamWithFilesPostOptions = (options: Options<ChatStreamWithFilesChatStreamWithFilesPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await chatStreamWithFilesChatStreamWithFilesPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: chatStreamWithFilesChatStreamWithFilesPostQueryKey(options)
    });
};

export const chatStreamWithFilesChatStreamWithFilesPostMutation = (options?: Partial<Options<ChatStreamWithFilesChatStreamWithFilesPostData>>): UseMutationOptions<unknown, ChatStreamWithFilesChatStreamWithFilesPostError, Options<ChatStreamWithFilesChatStreamWithFilesPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, ChatStreamWithFilesChatStreamWithFilesPostError, Options<ChatStreamWithFilesChatStreamWithFilesPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await chatStreamWithFilesChatStreamWithFilesPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createSheetSheetsCreatePostQueryKey = (options: Options<CreateSheetSheetsCreatePostData>) => createQueryKey('createSheetSheetsCreatePost', options);

export const createSheetSheetsCreatePostOptions = (options: Options<CreateSheetSheetsCreatePostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createSheetSheetsCreatePost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createSheetSheetsCreatePostQueryKey(options)
    });
};

export const createSheetSheetsCreatePostMutation = (options?: Partial<Options<CreateSheetSheetsCreatePostData>>): UseMutationOptions<unknown, CreateSheetSheetsCreatePostError, Options<CreateSheetSheetsCreatePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, CreateSheetSheetsCreatePostError, Options<CreateSheetSheetsCreatePostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createSheetSheetsCreatePost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};